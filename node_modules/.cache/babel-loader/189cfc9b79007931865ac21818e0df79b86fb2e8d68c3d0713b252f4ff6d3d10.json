{"ast":null,"code":"import _createClass from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/christian/dev/ns3-program-viewer/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\n/*\n Copyright (c) 2022 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n/* global TransformStream */\n// deno-lint-ignore-file no-this-alias\n\nimport { ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, InflateStream, DeflateStream } from \"./zip-entry-stream.js\";\nvar MESSAGE_EVENT_TYPE = \"message\";\nvar MESSAGE_START = \"start\";\nvar MESSAGE_PULL = \"pull\";\nvar MESSAGE_DATA = \"data\";\nvar MESSAGE_ACK_DATA = \"ack\";\nvar MESSAGE_CLOSE = \"close\";\nvar CODEC_DEFLATE = \"deflate\";\nvar CODEC_INFLATE = \"inflate\";\nexport { CODEC_DEFLATE, CODEC_INFLATE, MESSAGE_EVENT_TYPE, MESSAGE_START, MESSAGE_PULL, MESSAGE_DATA, MESSAGE_ACK_DATA, MESSAGE_CLOSE, ERR_INVALID_PASSWORD, ERR_INVALID_SIGNATURE, CodecStream };\nvar CodecStream = /*#__PURE__*/function (_TransformStream) {\n  _inherits(CodecStream, _TransformStream);\n  var _super = _createSuper(CodecStream);\n  function CodecStream(options, config) {\n    var _thisSuper, _this;\n    _classCallCheck(this, CodecStream);\n    _this = _super.call(this, {});\n    var codec = _assertThisInitialized(_this);\n    var codecType = options.codecType;\n    var Stream;\n    if (codecType.startsWith(CODEC_DEFLATE)) {\n      Stream = DeflateStream;\n    } else if (codecType.startsWith(CODEC_INFLATE)) {\n      Stream = InflateStream;\n    }\n    var size = 0;\n    var stream = new Stream(options, config);\n    var readable = _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(CodecStream.prototype)), \"readable\", _thisSuper);\n    var transformStream = new TransformStream({\n      transform: function transform(chunk, controller) {\n        if (chunk && chunk.length) {\n          size += chunk.length;\n          controller.enqueue(chunk);\n        }\n      },\n      flush: function flush() {\n        var signature = stream.signature;\n        Object.assign(codec, {\n          signature: signature,\n          size: size\n        });\n      }\n    });\n    Object.defineProperty(codec, \"readable\", {\n      get: function get() {\n        return readable.pipeThrough(stream).pipeThrough(transformStream);\n      }\n    });\n    return _this;\n  }\n  return _createClass(CodecStream);\n}(TransformStream);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}