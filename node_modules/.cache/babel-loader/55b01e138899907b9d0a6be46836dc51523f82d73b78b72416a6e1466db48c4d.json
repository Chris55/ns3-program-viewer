{"ast":null,"code":"// ag-grid-react v29.1.0\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CellCompState = void 0;\nvar ag_grid_community_1 = require(\"ag-grid-community\");\nvar react_1 = __importStar(require(\"react\"));\nvar utils_1 = require(\"../utils\");\nvar popupEditorComp_1 = __importDefault(require(\"./popupEditorComp\"));\nvar showJsRenderer_1 = __importDefault(require(\"./showJsRenderer\"));\nvar beansContext_1 = require(\"../beansContext\");\nvar jsComp_1 = require(\"../jsComp\");\nvar useEffectOnce_1 = require(\"../useEffectOnce\");\nvar CellCompState;\n(function (CellCompState) {\n  CellCompState[CellCompState[\"ShowValue\"] = 0] = \"ShowValue\";\n  CellCompState[CellCompState[\"EditValue\"] = 1] = \"EditValue\";\n})(CellCompState = exports.CellCompState || (exports.CellCompState = {}));\nvar checkCellEditorDeprecations = function checkCellEditorDeprecations(popup, cellEditor, cellCtrl) {\n  var col = cellCtrl.getColumn();\n  // cellEditor is written to be a popup editor, however colDef.cellEditorPopup is not set\n  if (!popup && cellEditor.isPopup && cellEditor.isPopup()) {\n    var msg_1 = \"AG Grid: Found an issue in column \" + col.getColId() + \". If using React, specify an editor is a popup using colDef.cellEditorPopup=true. AG Grid React cannot depend on the editor component specifying if it's in a popup (via the isPopup() method on the editor), as React needs to know this information BEFORE the component is created.\";\n    ag_grid_community_1._.doOnce(function () {\n      return console.warn(msg_1);\n    }, 'jsEditorComp-isPopup-' + cellCtrl.getColumn().getColId());\n  }\n  // cellEditor is a popup and is trying to position itself the deprecated way\n  if (popup && cellEditor.getPopupPosition && cellEditor.getPopupPosition() != null) {\n    var msg_2 = \"AG Grid: Found an issue in column \" + col.getColId() + \". If using React, specify an editor popup position using colDef.cellEditorPopupPosition=true. AG Grid React cannot depend on the editor component specifying it's position (via the getPopupPosition() method on the editor), as React needs to know this information BEFORE the component is created.\";\n    ag_grid_community_1._.doOnce(function () {\n      return console.warn(msg_2);\n    }, 'jsEditorComp-getPopupPosition-' + cellCtrl.getColumn().getColId());\n  }\n};\nvar jsxEditValue = function jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui, cellCtrl, jsEditorComp) {\n  var compDetails = editDetails.compDetails;\n  var CellEditorClass = compDetails.componentClass;\n  var reactInlineEditor = compDetails.componentFromFramework && !editDetails.popup;\n  var reactPopupEditor = compDetails.componentFromFramework && editDetails.popup;\n  var jsPopupEditor = !compDetails.componentFromFramework && editDetails.popup;\n  return react_1.default.createElement(react_1.default.Fragment, null, reactInlineEditor && react_1.default.createElement(CellEditorClass, __assign({}, editDetails.compDetails.params, {\n    ref: setInlineCellEditorRef\n  })), reactPopupEditor && react_1.default.createElement(popupEditorComp_1.default, {\n    editDetails: editDetails,\n    cellCtrl: cellCtrl,\n    eParentCell: eGui,\n    wrappedContent: react_1.default.createElement(CellEditorClass, __assign({}, editDetails.compDetails.params, {\n      ref: setPopupCellEditorRef\n    }))\n  }), jsPopupEditor && jsEditorComp && react_1.default.createElement(popupEditorComp_1.default, {\n    editDetails: editDetails,\n    cellCtrl: cellCtrl,\n    eParentCell: eGui,\n    jsChildComp: jsEditorComp\n  }));\n};\nvar jsxShowValue = function jsxShowValue(showDetails, key, parentId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setECellValue) {\n  var compDetails = showDetails.compDetails,\n    value = showDetails.value;\n  var noCellRenderer = !compDetails;\n  var reactCellRenderer = compDetails && compDetails.componentFromFramework;\n  var CellRendererClass = compDetails && compDetails.componentClass;\n  // if we didn't do this, objects would cause React error. we depend on objects for things\n  // like the aggregation functions avg and count, which return objects and depend on toString()\n  // getting called.\n  var valueForNoCellRenderer = (value === null || value === void 0 ? void 0 : value.toString) ? value.toString() : value;\n  var bodyJsxFunc = function bodyJsxFunc() {\n    return react_1.default.createElement(react_1.default.Fragment, null, noCellRenderer && react_1.default.createElement(react_1.default.Fragment, null, valueForNoCellRenderer), reactCellRenderer && !reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign({}, compDetails.params, {\n      key: key,\n      ref: cellRendererRef\n    })), reactCellRenderer && reactCellRendererStateless && react_1.default.createElement(CellRendererClass, __assign({}, compDetails.params, {\n      key: key\n    })));\n  };\n  return react_1.default.createElement(react_1.default.Fragment, null, showCellWrapper ? react_1.default.createElement(\"span\", {\n    role: \"presentation\",\n    id: \"cell-\" + parentId,\n    className: \"ag-cell-value\",\n    ref: setECellValue\n  }, bodyJsxFunc()) : bodyJsxFunc());\n};\nvar CellComp = function CellComp(props) {\n  var context = react_1.useContext(beansContext_1.BeansContext).context;\n  var cellCtrl = props.cellCtrl,\n    printLayout = props.printLayout,\n    editingRow = props.editingRow;\n  var _a = react_1.useState(),\n    renderDetails = _a[0],\n    _setRenderDetails = _a[1];\n  var _b = react_1.useState(),\n    editDetails = _b[0],\n    _setEditDetails = _b[1];\n  var _c = react_1.useState(1),\n    renderKey = _c[0],\n    setRenderKey = _c[1];\n  var _d = react_1.useState(),\n    userStyles = _d[0],\n    _setUserStyles = _d[1];\n  var _e = react_1.useState(),\n    tabIndex = _e[0],\n    _setTabIndex = _e[1];\n  var _f = react_1.useState(),\n    ariaDescribedBy = _f[0],\n    setAriaDescribedBy = _f[1];\n  var _g = react_1.useState(),\n    role = _g[0],\n    _setRole = _g[1];\n  var _h = react_1.useState(),\n    colId = _h[0],\n    _setColId = _h[1];\n  var _j = react_1.useState(),\n    title = _j[0],\n    _setTitle = _j[1];\n  var _k = react_1.useState(false),\n    includeSelection = _k[0],\n    _setIncludeSelection = _k[1];\n  var _l = react_1.useState(false),\n    includeRowDrag = _l[0],\n    _setIncludeRowDrag = _l[1];\n  var _m = react_1.useState(false),\n    includeDndSource = _m[0],\n    _setIncludeDndSource = _m[1];\n  var _o = react_1.useState(),\n    jsEditorComp = _o[0],\n    setJsEditorComp = _o[1];\n  var forceWrapper = react_1.useMemo(function () {\n    return cellCtrl.isForceWrapper();\n  }, []);\n  var eGui = react_1.useRef(null);\n  var cellRendererRef = react_1.useRef(null);\n  var jsCellRendererRef = react_1.useRef();\n  var cellEditorRef = react_1.useRef();\n  // when setting the ref, we also update the state item to force a re-render\n  var eCellWrapper = react_1.useRef();\n  var _p = react_1.useState(0),\n    cellWrapperVersion = _p[0],\n    setCellWrapperVersion = _p[1];\n  var setCellWrapperRef = react_1.useCallback(function (ref) {\n    eCellWrapper.current = ref;\n    setCellWrapperVersion(function (v) {\n      return v + 1;\n    });\n  }, []);\n  // when setting the ref, we also update the state item to force a re-render\n  var eCellValue = react_1.useRef();\n  var _q = react_1.useState(0),\n    cellValueVersion = _q[0],\n    setCellValueVersion = _q[1];\n  var setCellValueRef = react_1.useCallback(function (ref) {\n    eCellValue.current = ref;\n    setCellValueVersion(function (v) {\n      return v + 1;\n    });\n  }, []);\n  var showTools = renderDetails != null && (includeSelection || includeDndSource || includeRowDrag);\n  var showCellWrapper = forceWrapper || showTools;\n  var setCellEditorRef = react_1.useCallback(function (popup, cellEditor) {\n    cellEditorRef.current = cellEditor;\n    if (cellEditor) {\n      checkCellEditorDeprecations(popup, cellEditor, cellCtrl);\n      var editingCancelledByUserComp = cellEditor.isCancelBeforeStart && cellEditor.isCancelBeforeStart();\n      if (editingCancelledByUserComp) {\n        // we cannot set state inside render, so hack is to do it in next VM turn\n        setTimeout(function () {\n          cellCtrl.stopEditing(true);\n          cellCtrl.focusCell(true);\n        });\n      }\n    }\n  }, []);\n  var setPopupCellEditorRef = react_1.useCallback(function (cellRenderer) {\n    return setCellEditorRef(true, cellRenderer);\n  }, []);\n  var setInlineCellEditorRef = react_1.useCallback(function (cellRenderer) {\n    return setCellEditorRef(false, cellRenderer);\n  }, []);\n  var cssClassManager = react_1.useMemo(function () {\n    return new ag_grid_community_1.CssClassManager(function () {\n      return eGui.current;\n    });\n  }, []);\n  showJsRenderer_1.default(renderDetails, showCellWrapper, eCellValue.current, cellValueVersion, jsCellRendererRef, eGui);\n  // if RenderDetails changed, need to call refresh. This is not our preferred way (the preferred\n  // way for React is just allow the new props to propagate down to the React Cell Renderer)\n  // however we do this for backwards compatibility, as having refresh used to be supported.\n  var lastRenderDetails = react_1.useRef();\n  react_1.useEffect(function () {\n    var oldDetails = lastRenderDetails.current;\n    var newDetails = renderDetails;\n    lastRenderDetails.current = renderDetails;\n    // if not updating renderDetails, do nothing\n    if (oldDetails == null || oldDetails.compDetails == null || newDetails == null || newDetails.compDetails == null) {\n      return;\n    }\n    var oldCompDetails = oldDetails.compDetails;\n    var newCompDetails = newDetails.compDetails;\n    // if different Cell Renderer, then do nothing, as renderer will be recreated\n    if (oldCompDetails.componentClass != newCompDetails.componentClass) {\n      return;\n    }\n    // if no refresh method, do nothing\n    if (cellRendererRef.current == null || cellRendererRef.current.refresh == null) {\n      return;\n    }\n    var result = cellRendererRef.current.refresh(newCompDetails.params);\n    if (result != true) {\n      // increasing the render key forces the refresh. this is undocumented (for React users,\n      // we don't document the refresh method, instead we tell them to act on new params).\n      // however the GroupCellRenderer has this logic in it and would need a small refactor\n      // to get it working without using refresh() returning false. so this hack staying in,\n      // in React if refresh() is implemented and returns false (or undefined), we force a refresh\n      setRenderKey(function (prev) {\n        return prev + 1;\n      });\n    }\n  }, [renderDetails]);\n  react_1.useEffect(function () {\n    var doingJsEditor = editDetails && !editDetails.compDetails.componentFromFramework;\n    if (!doingJsEditor) {\n      return;\n    }\n    var compDetails = editDetails.compDetails;\n    var isPopup = editDetails.popup === true;\n    var cellEditor = jsComp_1.createSyncJsComp(compDetails);\n    if (!cellEditor) {\n      return;\n    }\n    var compGui = cellEditor.getGui();\n    setCellEditorRef(isPopup, cellEditor);\n    if (!isPopup) {\n      var parentEl = (forceWrapper ? eCellWrapper : eGui).current;\n      parentEl === null || parentEl === void 0 ? void 0 : parentEl.appendChild(compGui);\n      cellEditor.afterGuiAttached && cellEditor.afterGuiAttached();\n    }\n    setJsEditorComp(cellEditor);\n    return function () {\n      context.destroyBean(cellEditor);\n      setCellEditorRef(isPopup, undefined);\n      setJsEditorComp(undefined);\n      if (compGui && compGui.parentElement) {\n        compGui.parentElement.removeChild(compGui);\n      }\n    };\n  }, [editDetails]);\n  // tool widgets effect\n  react_1.useEffect(function () {\n    if (!cellCtrl || !context) {\n      return;\n    }\n    var cellId = \"cell-\" + cellCtrl.getInstanceId();\n    var describedByIds = [];\n    describedByIds.push(cellId);\n    if (!eCellWrapper.current || !showCellWrapper) {\n      return;\n    }\n    var destroyFuncs = [];\n    var addComp = function addComp(comp) {\n      if (comp) {\n        var eGui_1 = comp.getGui();\n        eCellWrapper.current.insertAdjacentElement('afterbegin', eGui_1);\n        destroyFuncs.push(function () {\n          context.destroyBean(comp);\n          ag_grid_community_1._.removeFromParent(eGui_1);\n        });\n      }\n      return comp;\n    };\n    if (includeSelection) {\n      var checkboxSelectionComp = cellCtrl.createSelectionCheckbox();\n      describedByIds.push(checkboxSelectionComp.getCheckboxId());\n      addComp(checkboxSelectionComp);\n    }\n    if (includeDndSource) {\n      addComp(cellCtrl.createDndSource());\n    }\n    if (includeRowDrag) {\n      addComp(cellCtrl.createRowDragComp());\n    }\n    setAriaDescribedBy(describedByIds.join(' '));\n    return function () {\n      return destroyFuncs.forEach(function (f) {\n        return f();\n      });\n    };\n  }, [showCellWrapper, includeDndSource, includeRowDrag, includeSelection, cellWrapperVersion]);\n  // we use layout effect here as we want to synchronously process setComp and it's side effects\n  // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n  useEffectOnce_1.useLayoutEffectOnce(function () {\n    if (!cellCtrl) {\n      return;\n    }\n    var compProxy = {\n      addOrRemoveCssClass: function addOrRemoveCssClass(name, on) {\n        return cssClassManager.addOrRemoveCssClass(name, on);\n      },\n      setUserStyles: function setUserStyles(styles) {\n        return _setUserStyles(styles);\n      },\n      getFocusableElement: function getFocusableElement() {\n        return eGui.current;\n      },\n      setTabIndex: function setTabIndex(tabIndex) {\n        return _setTabIndex(tabIndex);\n      },\n      setRole: function setRole(role) {\n        return _setRole(role);\n      },\n      setColId: function setColId(colId) {\n        return _setColId(colId);\n      },\n      setTitle: function setTitle(title) {\n        return _setTitle(title);\n      },\n      setIncludeSelection: function setIncludeSelection(include) {\n        return _setIncludeSelection(include);\n      },\n      setIncludeRowDrag: function setIncludeRowDrag(include) {\n        return _setIncludeRowDrag(include);\n      },\n      setIncludeDndSource: function setIncludeDndSource(include) {\n        return _setIncludeDndSource(include);\n      },\n      getCellEditor: function getCellEditor() {\n        return cellEditorRef.current || null;\n      },\n      getCellRenderer: function getCellRenderer() {\n        return cellRendererRef.current ? cellRendererRef.current : jsCellRendererRef.current;\n      },\n      getParentOfValue: function getParentOfValue() {\n        return eCellValue.current ? eCellValue.current : eCellWrapper.current ? eCellWrapper.current : eGui.current;\n      },\n      setRenderDetails: function setRenderDetails(compDetails, value, force) {\n        _setRenderDetails({\n          value: value,\n          compDetails: compDetails,\n          force: force\n        });\n      },\n      setEditDetails: function setEditDetails(compDetails, popup, popupPosition) {\n        if (compDetails) {\n          // start editing\n          _setEditDetails({\n            compDetails: compDetails,\n            popup: popup,\n            popupPosition: popupPosition\n          });\n          if (!popup) {\n            _setRenderDetails(undefined);\n          }\n        } else {\n          // stop editing\n          _setEditDetails(undefined);\n        }\n      }\n    };\n    var cellWrapperOrUndefined = eCellWrapper.current || undefined;\n    cellCtrl.setComp(compProxy, eGui.current, cellWrapperOrUndefined, printLayout, editingRow);\n  });\n  var reactCellRendererStateless = react_1.useMemo(function () {\n    var res = renderDetails && renderDetails.compDetails && renderDetails.compDetails.componentFromFramework && utils_1.isComponentStateless(renderDetails.compDetails.componentClass);\n    return !!res;\n  }, [renderDetails]);\n  react_1.useEffect(function () {\n    var _a;\n    if (!eGui.current) {\n      return;\n    }\n    cssClassManager.addOrRemoveCssClass('ag-cell-value', !showCellWrapper);\n    cssClassManager.addOrRemoveCssClass('ag-cell-inline-editing', !!editDetails && !editDetails.popup);\n    cssClassManager.addOrRemoveCssClass('ag-cell-popup-editing', !!editDetails && !!editDetails.popup);\n    cssClassManager.addOrRemoveCssClass('ag-cell-not-inline-editing', !editDetails || !!editDetails.popup);\n    (_a = cellCtrl.getRowCtrl()) === null || _a === void 0 ? void 0 : _a.setInlineEditingCss(!!editDetails);\n  });\n  var cellInstanceId = react_1.useMemo(function () {\n    return cellCtrl.getInstanceId();\n  }, []);\n  var showContents = function showContents() {\n    return react_1.default.createElement(react_1.default.Fragment, null, renderDetails != null && jsxShowValue(renderDetails, renderKey, cellInstanceId, cellRendererRef, showCellWrapper, reactCellRendererStateless, setCellValueRef), editDetails != null && jsxEditValue(editDetails, setInlineCellEditorRef, setPopupCellEditorRef, eGui.current, cellCtrl, jsEditorComp));\n  };\n  return react_1.default.createElement(\"div\", {\n    ref: eGui,\n    style: userStyles,\n    tabIndex: tabIndex,\n    role: role,\n    \"col-id\": colId,\n    title: title,\n    \"aria-describedby\": ariaDescribedBy\n  }, showCellWrapper ? react_1.default.createElement(\"div\", {\n    className: \"ag-cell-wrapper\",\n    role: \"presentation\",\n    \"aria-hidden\": \"true\",\n    ref: setCellWrapperRef\n  }, showContents()) : showContents());\n};\nexports.default = react_1.memo(CellComp);","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}